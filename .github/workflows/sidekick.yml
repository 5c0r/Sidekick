name: Sidekick Workflow

on:
  push:
    branches:
    - main
    - develop
  pull_request:
    branches:
    - main
    - develop
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ASPNETCORE_ENVIRONMENT: Production
    steps:
    - name: Git - Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Git - Fetch Tags
      run: git fetch --tags
    - name: Git - Fetch Main
      if: github.ref != 'refs/heads/main'
      run: git branch --create-reflog main origin/main
    - name: GitVersion - Install
      uses: gittools/actions/gitversion/setup@v0.9.7
      with:
        versionSpec: '5.x'
    - name: GitVersion - Execute
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0.9.7
      with:
        useConfigFile: true
        updateAssemblyInfo: true
    - name: GitVersion - Output
      run: |
        echo "Major: ${{ steps.gitversion.outputs.major }}"
        echo "Minor: ${{ steps.gitversion.outputs.minor }}"
        echo "Patch: ${{ steps.gitversion.outputs.patch }}"
        echo "PreReleaseTag: ${{ steps.gitversion.outputs.preReleaseTag }}"
        echo "PreReleaseTagWithDash: ${{ steps.gitversion.outputs.preReleaseTagWithDash }}"
        echo "PreReleaseLabel: ${{ steps.gitversion.outputs.preReleaseLabel }}"
        echo "PreReleaseNumber: ${{ steps.gitversion.outputs.preReleaseNumber }}"
        echo "WeightedPreReleaseNumber: ${{ steps.gitversion.outputs.weightedPreReleaseNumber }}"
        echo "BuildMetaData: ${{ steps.gitversion.outputs.buildMetaData }}"
        echo "BuildMetaDataPadded: ${{ steps.gitversion.outputs.buildMetaDataPadded }}"
        echo "FullBuildMetaData: ${{ steps.gitversion.outputs.fullBuildMetaData }}"
        echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
        echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
        echo "LegacySemVer: ${{ steps.gitversion.outputs.legacySemVer }}"
        echo "LegacySemVerPadded: ${{ steps.gitversion.outputs.legacySemVerPadded }}"
        echo "AssemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}"
        echo "AssemblySemFileVer: ${{ steps.gitversion.outputs.assemblySemFileVer }}"
        echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
        echo "InformationalVersion: ${{ steps.gitversion.outputs.informationalVersion }}"
        echo "BranchName: ${{ steps.gitversion.outputs.branchName }}"
        echo "EscapedBranchName: ${{ steps.gitversion.outputs.escapedBranchName }}"
        echo "Sha: ${{ steps.gitversion.outputs.sha }}"
        echo "ShortSha: ${{ steps.gitversion.outputs.shortSha }}"
        echo "NuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
        echo "NuGetVersion: ${{ steps.gitversion.outputs.nuGetVersion }}"
        echo "NuGetPreReleaseTagV2: ${{ steps.gitversion.outputs.nuGetPreReleaseTagV2 }}"
        echo "NuGetPreReleaseTag: ${{ steps.gitversion.outputs.nuGetPreReleaseTag }}"
        echo "VersionSourceSha: ${{ steps.gitversion.outputs.versionSourceSha }}"
        echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.commitsSinceVersionSource }}"
        echo "CommitsSinceVersionSourcePadded: ${{ steps.gitversion.outputs.commitsSinceVersionSourcePadded }}"
        echo "UncommittedChanges: ${{ steps.gitversion.outputs.uncommittedChanges }}"
        echo "CommitDate: ${{ steps.gitversion.outputs.commitDate }}"
    - name: .NET - Setup
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - name: NuGet - Setup
      uses: NuGet/setup-nuget@v1.0.5
    - name: NuGet - Source
      uses: fabriciomurta/ensure-nuget-source@v1
    - name: .NET - Tool - ElectronNET
      run: dotnet tool install --global ElectronNET.CLI
    - name: .NET - Tool Restore
      run: dotnet tool restore
    - name: Restore
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Tests
      run: dotnet test --no-build --verbosity normal /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura
    - name: Tests - Unit Tests Report
      uses: dorny/test-reporter@v1.3.1
      with:
        name: Tests - Unit Tests
        path: '**/*.trx'
        reporter: dotnet-trx
    - name: Tests - Coverage Report
      uses: 5monkeys/cobertura-action@v8
      with:
        repo_token: ${{ github.token }}
        report_name: Tests - Coverage
    - name: Electron - Build x64
      run: dotnet electronize build /target win /PublishSingleFile false
    - name: Git - Tag
      uses: tvdias/github-tagger@v0.0.2
      with:
        tag: ${{ steps.gitversion.outputs.fullSemVer }}
      
