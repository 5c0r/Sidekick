@using Sidekick.Domain.Views

<div class="application-nav-bar">
    <MudAppBar Color="Color.Primary" Fixed="false">
        @LeftContent
        @if (!string.IsNullOrEmpty(Title))
        {
            <MudText Typo="Typo.body1">@Title</MudText>
        }
        <MudAppBarSpacer />
        @RightContent
        @if (View.HasValue)
        {
            <MudIconButton Icon="@Icons.Filled.Minimize" @onclick="Minimize" />
            <MudIconButton Icon="@Icons.Filled.CropSquare" @onclick="Maximize" />
            <MudIconButton Icon="@Icons.Filled.Close" @onclick="Close" Edge="Edge.End" />
        }
    </MudAppBar>
</div>

@code {
    [Inject] private IViewLocator ViewLocator { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    [Parameter] public RenderFragment LeftContent { get; set; }
    [Parameter] public RenderFragment RightContent { get; set; }
    [Parameter] public string Title { get; set; }
    [Parameter] public View? View { get; set; } = null;

    public void Minimize()
    {
        if (View.HasValue)
        {
            ViewLocator.Minimize(View.Value);
        }
    }

    public void Maximize()
    {
        if (View.HasValue)
        {
            ViewLocator.Maximize(View.Value);
        }
    }

    public async void Close()
    {
        if (OnClose.HasDelegate)
        {
            await OnClose.InvokeAsync();
        }
        else if (View.HasValue)
        {
            ViewLocator.Close(View.Value);
        }
    }
}
