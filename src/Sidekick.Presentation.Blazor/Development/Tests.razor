@page "/development/tests"
@using Sidekick.Domain.Notifications.Commands

<DevelopmentLayout>
    <MudAppBar Color="Color.Primary">
        <MudText Typo="Typo.body1">Development Page</MudText>
    </MudAppBar>

    <MudMainContent>
        <MudContainer Class="py-6">

            <MudCard Class="mt-6">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">General</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudButton Variant="Variant.Filled" OnClick="ThrowException">Throw an exception</MudButton>
                </MudCardContent>
            </MudCard>

            <MudCard Class="mt-6">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Notification</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudText>OpenNotificationHandler must be implemented.</MudText>
                    <MudTextField Label="Title" @bind-Value="NotificationTitle" />
                    <MudTextField Label="Message" @bind-Value="NotificationMessage" />
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Filled" OnClick="ShowNotification">Show notification</MudButton>
                </MudCardActions>
            </MudCard>

        </MudContainer>
    </MudMainContent>
</DevelopmentLayout>

@code {
    [Inject] private IMediator Mediator { get; set; }

    private string NotificationTitle { get; set; }
    private string NotificationMessage { get; set; }

    public void ThrowException()
    {
#pragma warning disable S112 // General exceptions should never be thrown
        throw new Exception("Developper test from the exception page.");
#pragma warning restore S112 // General exceptions should never be thrown
    }

    public async void ShowNotification()
    {
        await Mediator.Send(new OpenNotificationCommand(NotificationMessage, NotificationTitle));
    }
}
