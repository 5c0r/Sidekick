@page "/price/{itemText}"
@layout OverlayLayout

@if (ViewModel != null && false)
{
    <MudGrid>
        <MudItem xs="4" style="height: 600px; overflow-y: scroll;">
            <ItemView Show="ViewModel.Item" Filters="ViewModel.Filters" />
        </MudItem>
        <MudItem xs="4" style="height: 600px; overflow-y: hidden;">
            <ListView OnClick="ViewModel.Preview" Results="ViewModel.Results" />
            <MudCard>
                <MudCardContent Class="mt-2">
                    @ViewModel.CountString
                </MudCardContent>
            </MudCard>
            <MudCard>
                <MudCardContent Class="mt-2">
                    @ViewModel.PoeNinjaText
                    @ViewModel.PredictionText
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="4" style="height: 600px; overflow-y: scroll;">
            @if (ViewModel.HasPreviewItem)
            {
                <ItemPreview PriceItem="ViewModel.PreviewItem" />
            }
        </MudItem>
    </MudGrid>
}

@code {
  [Inject] private PricesModel ViewModel { get; set; }
  [Inject] private IMediator Mediator { get; set; }
  [Inject] private IViewLocator ViewLocator { get; set; }
  [Inject] private IViewInstance ViewInstance { get; set; }

  [CascadingParameter] public OverlayLayout Layout { get; set; }

  [Parameter] public string ItemText { get; set; }

  private Item Item { get; set; }

  protected override async Task OnInitializedAsync()
  {
      Item = await Mediator.Send(new ParseItemCommand(ItemText.DecodeBase64Url()));

      if (Item == null)
      {
          await ViewLocator.Open(View.Error, ErrorType.Unparsable);
          await ViewInstance.Close();
          return;
      }

      Layout.SetTitle(Item.Original.Name);

      await base.OnInitializedAsync();
  }
}
