@using Sidekick.Domain.Keybinds
@using Sidekick.Domain.Platforms

<div class="d-flex align-center">
    <div class="flex-grow-1 pr-4">
        <MudField Label="@Label" Variant="Variant.Filled" Class="@Class" @onclick="Click">
            @if (Active)
            {
                <MudText>@Resources.Key_Active</MudText>
            }
            else if (string.IsNullOrEmpty(Value))
            {
                <MudText>@Resources.Key_Unset</MudText>
            }
            else
            {
                <MudText>@Value</MudText>
            }
        </MudField>
    </div>
    <div class="flex-grow-0">
        <MudIconButton Icon="@Icons.Filled.Delete" @onclick="Delete"></MudIconButton>
    </div>
</div>

@implements IDisposable
@code {
    [Inject] private SettingsResources Resources { get; set; }
    [Inject] private SettingsViewModel ViewModel { get; set; }
    [Inject] private IKeyboardProvider Keyboard { get; set; }
    [Inject] private IKeybindsExecutor Keybinds { get; set; }
    [Inject] private IKeybindProvider KeybindProvider { get; set; }

    [Parameter] public string Label { get; set; }
    [Parameter] public string Value { get; set; }
    [Parameter] public EventCallback<string> ValueChanged { get; set; }

    private Guid Id { get; } = Guid.NewGuid();
    private bool Active => ViewModel.CurrentKey == Id;
    private string Class => Active ? "mud-info" : null;

    protected override void OnInitialized()
    {
        KeybindProvider.Unregister();
        Keyboard.OnKeyDown += OnKeyDown;
        base.OnInitialized();
    }

    public void Click()
    {
        if (ViewModel.CurrentKey == Id)
        {
            ViewModel.CurrentKey = null;
        }
        else
        {
            ViewModel.CurrentKey = Id;
        }
    }

    private void OnKeyDown(string key)
    {
        if (!Active)
        {
            return;
        }

        this.InvokeAsync(async () =>
        {

            if (key != "Esc")
            {
                await ValueChanged.InvokeAsync(key);
            }

            ViewModel.CurrentKey = null;
            StateHasChanged();
        });
    }

    public async Task Delete()
    {
        ViewModel.CurrentKey = null;
        await ValueChanged.InvokeAsync("");
    }

    public void Dispose()
    {
        Keyboard.OnKeyDown -= OnKeyDown;
        KeybindProvider.Register();
    }
}
