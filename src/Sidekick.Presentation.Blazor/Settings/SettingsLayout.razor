@using Sidekick.Domain.Cache.Commands
@using Sidekick.Domain.Initialization.Commands
@using Sidekick.Domain.Settings.Commands

<SidekickLayout>
    <SidekickAppBar Title="@Localizer[SettingsResources.Title]" View="View.Settings"></SidekickAppBar>

    <MudDrawer ClipMode="DrawerClipMode.Always"
               Open="true"
               Variant="DrawerVariant.Persistent">
        <MudDrawerHeader></MudDrawerHeader>
        <MudNavMenu>
            <MudNavLink Match="NavLinkMatch.All" Href="/settings">@Localizer[SettingsResources.General]</MudNavLink>
            <MudNavLink Match="NavLinkMatch.All" Href="/settings/price">@Localizer[SettingsResources.Price]</MudNavLink>
            <MudNavLink Match="NavLinkMatch.All" Href="/settings/map">@Localizer[SettingsResources.Map]</MudNavLink>
            <MudNavLink Match="NavLinkMatch.All" Href="/settings/wiki">@Localizer[SettingsResources.Wiki]</MudNavLink>
            <MudNavLink Match="NavLinkMatch.All" Href="/settings/chat">@Localizer[SettingsResources.Chat]</MudNavLink>
            <MudNavLink Match="NavLinkMatch.All" Href="/settings/stash">@Localizer[SettingsResources.Stash]</MudNavLink>
        </MudNavMenu>
    </MudDrawer>

    <MudMainContent>
        <MudContainer Class="py-6">
            @ChildContent

            <div class="pt-6 d-flex">
                <div class="flex-grow-1">
                    <MudButton Variant="Variant.Text"
                               OnClick="ResetCache">
                        @Localizer[SettingsResources.ResetCache]
                    </MudButton>
                </div>
                <div class="flex-grow-0">
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               OnClick="Save">
                        @Localizer[SettingsResources.Save]
                    </MudButton>
                </div>
            </div>
        </MudContainer>
    </MudMainContent>
</SidekickLayout>

@code {
    [Inject] private IStringLocalizer<SettingsResources> Localizer { get; set; }
    [Inject] private IMediator Mediator { get; set; }
    [Inject] private SettingsViewModel ViewModel { get; set; }
    [Inject] private IViewLocator ViewLocator { get; set; }

    [Parameter] public RenderFragment ChildContent { get; set; }

    public async Task Save()
    {
        await Mediator.Send(new SaveSettingsCommand(ViewModel));
        ViewLocator.Close(View.Settings);
    }

    public async Task ResetCache()
    {
        await Mediator.Send(new ClearCacheCommand());
        await Mediator.Send(new InitializeCommand(false));
    }
}
