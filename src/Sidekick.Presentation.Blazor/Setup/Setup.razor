@page "/setup"
@using Blazored.FluentValidation
@using FluentValidation
@using Sidekick.Domain.App.Commands
@using Sidekick.Domain.Initialization.Commands
@using Sidekick.Domain.Settings.Commands
@using Sidekick.Presentation.Blazor.Settings
@using Sidekick.Presentation.Blazor.Settings.Components

<SidekickLayout>
    <SidekickAppBar Title="@SetupLocalizer[SetupResources.Title]" View="View.Setup" OnClose="Exit"></SidekickAppBar>

    <MudMainContent>
        <MudContainer>
            <EditForm Model="@ViewModel" OnValidSubmit="Save">
                <FluentValidationValidator DisableAssemblyScanning="@true" />

                <MudCard Class="mt-6">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">@Localizer[SettingsResources.Language_Title]</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <UILanguageSelect @bind-Value="ViewModel.Language_UI" For="@(() => ViewModel.Language_UI)" />
                        <GameLanguageSelect Value="@ViewModel.Language_Parser" For="@(() => ViewModel.Language_Parser)" ValueChanged="OnGameLanguageChange" />
                    </MudCardContent>
                </MudCard>

                <MudCard Class="mt-6">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">@Localizer[SettingsResources.Character_Title]</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <LeagueSelect @bind-Value="ViewModel.LeagueId" For="@(() => ViewModel.LeagueId)" @ref="RefLeagueSelect" />
                        <MudTextField Label="@Localizer[SettingsResources.Character_Name]"
                                      Variant="Variant.Filled"
                                      @bind-Value="ViewModel.Character_Name"
                                      For="@(() => ViewModel.Character_Name)" />
                    </MudCardContent>
                </MudCard>

                <MudCard Class="mt-6">
                    <MudCardContent>
                        <MudCheckBox Label="@Localizer[SettingsResources.General_SendCrashReports]" @bind-Checked="@ViewModel.SendCrashReports" />
                    </MudCardContent>
                </MudCard>

                <br />

                <div class="d-flex justify-end mb-6">
                    <MudButton OnClick="Exit"
                               Variant="Variant.Text"
                               Color="Color.Default">
                        @SetupLocalizer[SetupResources.Exit]
                    </MudButton>
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               ButtonType="ButtonType.Submit">
                        @Localizer[SettingsResources.Save]
                    </MudButton>
                </div>
            </EditForm>
        </MudContainer>
    </MudMainContent>
</SidekickLayout>

@code {
    [Inject] private IStringLocalizer<SettingsResources> Localizer { get; set; }
    [Inject] private IStringLocalizer<SetupResources> SetupLocalizer { get; set; }
    [Inject] private IMediator Mediator { get; set; }
    [Inject] private SettingsViewModel ViewModel { get; set; }

    private LeagueSelect RefLeagueSelect;

    public async Task Exit()
    {
        await Mediator.Send(new ShutdownCommand());
    }

    public async Task Save()
    {
        await Mediator.Send(new SaveSettingsCommand(ViewModel, true));
        await Mediator.Send(new InitializeCommand(true));
    }

    public async Task OnGameLanguageChange(string value)
    {
        ViewModel.Language_Parser = value;
        await Mediator.Send(new Sidekick.Domain.Game.Languages.Commands.SetGameLanguageCommand(value));
        await RefLeagueSelect.RefreshOptions();
    }

    public class Validator : AbstractValidator<SettingsViewModel>
    {
        public Validator(IStringLocalizer<SettingsResources> localizer)
        {
            RuleFor(x => x.Character_Name)
                .Cascade(CascadeMode.Stop)
                .NotEmpty()
                .WithName(localizer[SettingsResources.Character_Name]);

            RuleFor(v => v.Language_UI)
            .Cascade(CascadeMode.Stop)
            .NotEmpty()
            .WithName(localizer[SettingsResources.Language_UI]);
            RuleFor(v => v.Language_Parser)
                .Cascade(CascadeMode.Stop)
                .NotEmpty()
                .WithName(localizer[SettingsResources.Language_Parser]);
            RuleFor(v => v.LeagueId)
                .Cascade(CascadeMode.Stop)
                .NotEmpty()
                .WithName(localizer[SettingsResources.Character_League]);
        }
    }
}
